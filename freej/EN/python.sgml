<chapter>
  <title>Use in Python</title>

  <indexterm><primary>Python</primary></indexterm>
  <indexterm><primary>PyGame</primary></indexterm>
  <indexterm><primary>Crystal Space</primary></indexterm>

<mediaobject>
   <imageobject>
        <imagedata align="center" fileref="images/python_logo" format="jpg">
   </imageobject>
</mediaobject>


<para>
You  can  use FreeJ  in  your python  code  to  playback videos  quite
efficiently, it's API has been designed in C++ and the namespace tends
to be clear and intuitive. Layer lists map nicely to python arrays and
can be indexed almost natively,  for instance. Altough this feature it
at  its early  development stage  and  being refined  (with your  help
please!)   it can  already give  some good  satisfaction when  used in
conjunction with frameworks as PyGame and Crystal Space.
</para>

<para>
First make  sure you have installed  a version of  FreeJ compiled with
python bindings:  that means a  package or fresh source  compiled with
Swig and Python development packages (see the chapter Install, Compile
from source).   FreeJ should have  installed freej.py in  /usr/lib (or
/usr/local/lib  depending   from  your  installation   prefix)  inside
python/site-packages.
</para>

<para>
The following script will set you  rolling, you can then start it with
an argument:  a file to  open, be  it an image  or video or  any other
input layer supported by your installation.

<screen>
import freej
import time
import sys
</screen>

will import the FreeJ engine and some python basics

<screen>
freej.set_debug(3)
</screen>

you can safely  omit it, altough will show  more details about actions
the freej engine does, for debugging purposes.

<screen>
cx = freej.Context()
cx.init(400,300,0,0)
</screen>

creates and initialises a context,  that is an instance of FreeJ, with
a size  of 400  by 300;  the size can  also be  adjusted interactively
later, with screen implementations that support it.

<screen>
cx.plugger.refresh(cx)
</screen>

refresh the list  of plugins present on the system  (so far frei0r and
freeframe video plugins are  supported and some distributed by default
in FreeJ)

<screen>
lay = freej.create_layer(cx,sys.argv[1])
lay.start()
</screen>

opens the file given at commandline and starts it in a layer

<screen>
lay.add_filter(cx.filters["vertigo"])
lay.active = True
</screen>

adds the visual effect "vertigo" to the layer created

<screen>
cx.add_layer(lay)
</screen>

adds the layer to the screen

<screen>
# main loop
while True:
	cx.cafudda(1.0)
	time.sleep(0.04)
time.sleep(10)
</screen>

a slightly sloppy way to run the engine :) this is being worked on, we
basically  want to offer  two ways  to handle  freej: via  setting its
running time by steps as here, or via registering callbacks.

</para>

<para>
If you arrived until here with Python bindings you are on the bleeding
edge and ready to contribute, the engine basically works now and until
mid-2009  we'll  be  very  active  in  making  it  stable:  completely
non-blocking and with lower latency in layer manipulation.
</para>

<para>
However, the above  example is not all you can  already do with FreeJ:
all the C++ API  is mapped to Python and you can use  it as it is done
in its code, which right now is the main documentation source, already
reasonably documented via doxygen. For example, studying the header of
the video_encoder implementation  and how it is used  in the C++ code,
you  can recognize  the classes  that are  accessible from  Python and
script  the  encoding  and  streaming  capabilities.  There  are  many
possibilities out there ;^)
</para>


</chapter>


