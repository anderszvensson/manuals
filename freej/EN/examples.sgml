<section>
<title>Hello World</title>

<indexterm><primary>TextLayer</primary></indexterm>

<para>
Here below the  classical "Hello World" script that  simply opens up a
FreeJ output window and a Text Layer, writing into it,
</para>

%helloworld

<para>
After  initialisation of  <emphasis>cx</emphasis> as  a  FreeJ context
a   <emphasis>TextLayer</emphasis>  is   initialised   and  added   to
it. Please  note the sequence for  creating the layer  is fixed: first
the  constructor, then  <emphasis>init()</emphasis> is  called passing
the  context  as an  argument,  some text  is  written  into it  using
the <emphasis>write()</emphasis> method, the layer is then started and
added to the context.
</para>
</section>

<section>
<title>Play and apply an effect</title>

<indexterm><primary>Plugger</primary></indexterm>
<indexterm><primary>Filters</primary></indexterm>

<para>
The following script should be run with an argument: an image or video
file that will be reproduced with a filter effect applied on it.
</para>

%playeffect

<para>
This script creates and initialises  a context, that is an instance of
FreeJ,  with a  size of  400 by  300; the  size can  also  be adjusted
interactively later,  with screen implementations that  support it. It
then completes initialisation of plugin effects refreshing the list of
those            present            on           the            system
using <emphasis>plugger.refresh</emphasis>.
</para>

<para>
It then opens  the file given at commandline  as first argument (argv)
and starts  it in  a layer,  adds the visual  effect "vertigo"  to the
layer created, adds the layer to the screen and runs.
</para>

<para>
However, the above  example is not all you can  already do with FreeJ:
all the C++ API  is mapped to various languages and you  can use it as
it is  done in  its code,  which right now  is the  main documentation
source,  already  reasonably  documented  via  doxygen.  For  example,
studying the header of the  video_encoder implementation and how it is
used  in  the  C++  code,  you  can recognize  the  classes  that  are
accessible  from   Python  and  script  the   encoding  and  streaming
capabilities.  There are many possibilities out there ;^)
</para>
</section>

<section>
<title>Controllers</title>

<indexterm><primary>Controller</primary></indexterm>
<indexterm><primary>TriggerController</primary></indexterm>

<para>
Controllers in  FreeJ are  listeners which will  dispatch asynchronous
messages from input channels, that is for example a keyboard that will
activate callbacks every time  keys are pressed, informing the running
script  that something  is  happening. The  script  then can  overload
the  <emphasis>dispatch()</emphasis>   function  of  the  instantiated
controller,  to execute  arbitrary code  when events  occur  for that
controller.

</para>

<para>
Here below an example of this  use with the most basic controller: the
<emphasis>TriggerController</emphasis>,  once created  and registered,
will call dispatch() every time a frame is processed:
</para>

%controller

<para>
It initializes  a new FreeJ instance  as usual, then  declares the new
class  <emphasis>Frame</emphasis>  overloading the  TriggerController.
With  this  new class  we  overload the  <emphasis>dispatch</emphasis>
function to print out some output  every time is called, that is every
frame.
</para>

<para>
At  last  the  script creates  an  instance  of  the new  Frame  class
(inheriting  all methods  from TriggerController)  registers it  to be
called            by             the            engine            with
the <emphasis>register_controller()</emphasis> method in the Context.
</para>

<para>
Once initialized  this simple script will call  our dispatch function,
executing all  its contents, every time  a frame is  processed: so far
that is every time that cafudda() is called.
</para>

</section>

