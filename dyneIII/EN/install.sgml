<chapter>
<title>Install the medialab</title>

<para>
This chapter will describe various advanced uses of the dyne:bolic
system: how to cluster multiple computers to take advantage of shared
resources, how to make the system resident on various computers in a
medialab and how to keep your data safe from intrusions into your
privacy.
</para>

<para>
The knowledge provided by this chapter requires some basic confidence
with GNU/Linux systems and the use of the text console terminal. It
will empower you with the ability to flexibly setup fully operational
medialabs even using found computers, but you need to plan well the
architecture of your resources depending from your specific situation.
</para>


<section> <title>Boot from harddisk</title>

<indexterm><primary>boot from harddisk</primary></indexterm>

<para>

To install dyne:III you simply need to go on the Application Menu in
the section <emphasis>System</emphasis> and then
select <emphasis>Install pure:dyne</emphasis>.


</para>


<para> From there on, just follow the simple instructions! </para>



</section>

<section> <title>Boot from network</title>

<indexterm><primary>boot from network</primary></indexterm>

<para>
Network booting is supported on some personal computers: the PXE
system was included on some BIOS already at the beginning of year 2000
(rough estimation): if no harddisks or cd devices are found to boot,
the first black screen of the computer will search for a PXE boot on
the local network.
</para>

<para>
When booting PXE looks for a DHCP server on the local network for an
address assigned. When found it will connect via TFTP to receive the
kernel and the ramdisk from that server or another one.
</para>

<para>
To start a TFTP server distributing the current docked dyne:bolic system, it
is enough to run this command in a terminal:
<screen>
<prompt>[d:b] ~ # </prompt><userinput>tftpd -l -s $DYNE_SYS_MNT</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

You can also configure a DHCP server to provide the network addresses
to any PXE client booting. To do that use the graphical program
<emphasis>gdhcpd</emphasis> starting it from a terminal, or the sample
configuration file in /etc/dhcpd.conf. See <emphasis>man
dhcpd</emphasis> for a reference to how to launch and operate the DHCP
daemon.
</para>

<para>
For more informations see <emphasis>man tftpd</emphasis> and
<emphasis>man dhcpd</emphasis>.
</para>


</section>

<section>
<title>Boot from USB</title>

<para>
The following instructions explain how to make a usb storage device
(like usb stick) bootable with grub and install dyne:bolic on it so
that you can run it from USB, without harddisk or CD.
</para>

<para>
If you are looking for instructions on how to save your personal data
on a USB stick, then this is not the right place: look
at <emphasis>Nesting</emphasis>. If you're looking to copy the entire
system over to your harddrive, again, this is not the right place,
look at <emphasis>Docking</emphasis>. This section documents on how to
put the whole system on the usb stick.
</para>

<para>
The whole system requires a USB device about the size of the /dyne
directory (currently ~655MB at version 2.4.2) + ~30MB (for file system
headers). Therefore, the entire system should fit on a USB stick of
~685MB, but you may want a bit more space for your personal files. If
your USB stick is smaller try Nesting instead.
</para>

<para>
How DyneII loads (technical):

<simplelist>
<member>the boot system consists of a bootloader, in our case grub</member>
<member>the bootloader loads a kernel, in our case linux :)</member>
<member>the kernel loads a ramdisk, in our case dyne:II initrd.gz</member>
<member>the ramdisk will look for a dyne/ dock</member>
<member>we keep both kernel and ramdisk in a dock and install grub</member>
</simplelist>

First of all find what device your USB drive is

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cat /proc/partitions
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Ignore the entries that end in numbers, those are individual
partitions on each separate device. The ones that end in letters are
different devices: <emphasis>hda</emphasis> means your primary IDE
harddrive, <emphasis>sda</emphasis> (or sdb sdc etc.) generally means
a USB device (but can also mean a SCSI or SATA harddisk, be sure to
verify this on your specific system configuration)
</para>

<para>
If you're confused, look at the blocks column, which shows the # of
1KB blocks on the device. If you know how big your USB stick is, you
can find it this way. ~1,000,000 blocks = a 1 gigabyte device; ~64,000
blocks = 64MB device. From here on this tutorial assumes your usb
device is <emphasis>/dev/sda</emphasis>, if it's not /dev/sda, change
it as necessary.
</para>


<para>Now let's prepare the partitions of the usb key: in this example
we are using the console based cfdisk here, but you can also try to
use Parted which is a graphical tool in MENU->FILES->Parted.  Be
careful that you selected the right device to operate on (eventually
different from the /dev/sda in the examples below) because from now on
the operations described will erase all data on the device.
</para>

<para>
Let's start the partition tool:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cfdisk /dev/sda
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Now from inside cfdisk:

<simplelist>
<member>delete all partitions</member>
<member>create a new primary at the default maximum size</member>
<member>set the type to 83 (Linux)</member>
<member>Write everything and then Quit</member>
</simplelist>

Now you are ready to format your drive:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mke2fs /dev/sda1
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

You can change the above command <emphasis>mke2fs -j</emphasis> in
case you want to use EXT3 instead of EXT2. However, it is probably not
advised to use the EXT3 journaled filesystem on a flash/USB device:
journaling writes to the disk more often than necessary, which wears
out the USB device more quickly. Use a non-journaled filesystem such
as EXT2 (Linux only) or FAT32 (if you want to make your usb device
readable outside of Linux). The default (ext2) is a safe choice,
however, you may want to read up on journaled vs non-journaled file
systems and make an informed decision in your case.
</para>

<para>
Now mount the drive:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mount /dev/sda1 /mnt/usb 
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

And Install the bootloader (grub):

<screen>
<prompt>[d:b] ~ # </prompt><userinput>grubconfig
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Select the correct usb device, generally the last item in the
list. Note that if all the items in the list start
with <emphasis>hda</emphasis> the computer you're currently using can't
be booted from a usb device and you'd be installing grub to a
partition of your harddrive instead.
</para>

<para>
Now copy the dyne/ dock directory from your current system

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mkdir /mnt/usb/dyne
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
<prompt>[d:b] ~ # </prompt><userinput>rsync --inplace -Pr $DYNE_SYS_MNT/* /mnt/usb/dyne/
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Rsync is better than cp and we have a progressbar for this operation,
which will take quite some time, depending if you have a USB 1.0 or
2.0 connection.
</para>

<para>
It should be all ready at this point, so try booting your USB device
on a computer which supports USB booting. If it works, great!  If not,
open your /boot/grub/menu.lst (on the USB device) and change the
root(...) line from (hd0,0) to (hd1,0).
</para>


<para> Happy hacking ;)</para>


</section>



<section>
<title>Cluster computer farms</title>

<para>
Dyne:bolic implements clustering with a "human driven" suite of tools
that let you control various applications running on multiple
computers connected to your network.
</para>

<para>
In situations where you have many old computers you can use one for
each task and control all of them from the same keyboard and mouse.
The desktops of the computers can be visualized on your own screen or
on multiple screens in case you have monitors attached to each of
them. Powerful workstations can be combined using multiple processing
units and their displays can be tiled together to compose a unique
wide desktop.
</para>


<para>
This way to operate dyne:bolic computers involves different kinds of
applications offering a flexible setup that you can customize to your
needs. This part of the manual will just make you familiar with the
tools and you'll need to refer to their manuals to discover all the
potential.
</para>

<para>
To connect multiple computers you should first make sure you can reach
them over the network and you know their addresses. A simple way to do
it that will work on every GNU/Linux system is using the
command <emphasis>ifconfig</emphasis> on each computer to print out
the currently configured network address:
<screen>
<prompt>[d:b] ~ # </prompt><userinput>ifconfig | grep inet
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>
then edit your <emphasis>/etc/hosts</emphasis> file with the full list
of addresses and a name for them that you can choose. Copying the /etc/hosts file on all involved machines will make them aware of each other "hostnames".
</para>


<para>
<emphasis>Synergy</emphasis> is a powerful tool that lets your
keyboard and mouse control different desktops accessed simply moving
the mouse out of the current screen into theirs. An example
configuration file is provided
in <emphasis>/etc/synergy.conf</emphasis> and it must be modified
with the hostnames of your computers (to be associated to IP numeric
addresses in /etc/hosts).
</para>

<para>
The main computer where the keyboard and mouse are attached should run
the command:
<screen>
<prompt>[d:b] ~ # </prompt><userinput>synergys -n hostname -c /etc/synergy.conf
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

All the other computers to be connected should run this command,
making sure the config file include them in the setup:
<screen>
<prompt>[d:b] ~ # </prompt><userinput>synergyc -n hostname -c /etc/synergy.conf
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>
</para>

<para>
<emphasis>VNC</emphasis> is a remote video client that lets you
control the desktop of another computer on your network as inside a
window on your current desktop. It can be also used to interact with
two mouse and keyboard at the same time.
</para>

<para>
To share the desktop of a computer for an incoming VNC connection just
run:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>x11vnc
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

To connect to a computer sharing the VNC desktop:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>vncviewer computer
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

For more informations on VNC see <emphasis>man x11vnc</emphasis> and
<emphasis>man vncviewer</emphasis>.
</para>

<para>
<emphasis>Remote X</emphasis> execution lets you run an application on
another computer and control it on your desktop, as if it would be
running locally.
</para>

<para>
In order to authorize other computers to open applications on your
desktop you must first run the command:
<screen>
<prompt>[d:b] ~ # </prompt><userinput>xhost +computer
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Happy Hacking! ;^)


</section>




</chapter>
