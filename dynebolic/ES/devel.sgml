<chapter>
<title>Herramientas para el desarrollo</title>
<subtitle>Extiende y personaliza el live CD de Dyne</subtitle>

<para>
Dyne:II incluye SDK para remasterizar el live CD de manera que puedas incluir todas tus modificaciones personales al sistema así como las colecciones de software que tu decidas instalarle. De hecho, <emphasis>Dyne:II es un Dyne para producir Dyne</emphasis>. Considerala como una <emphasis>Distribución Nómada incrustada a ningún hardware</emphasis>. Puedes llevar contigo tu versión viva del cd/dvd/usb y cargarla en cualquier máquina, hacer tus cosas (desde el punto de vista del usuario y/o del desarrollador), puedes crear un nuevo live CD, limpiar todos tus rastros y luego abandonar el lugar. Solo camina por el mundo con tu CD re-escribible o con tu llavero usb y eso es todo.
</para>

<indexterm><primary>Arquitectura</primary></indexterm>
<para>Dyne:bolic es un sistema operativo un poco simple y minimalista (la filosofía sobre la que está basada esta distribución tiene referencia con <ulink url="http://www.slackware.com/">Slackware</ulink> en particular y en general con el principio KISS)<footnote><para> Según la <ulink url="http://es.wikipedia.org/wiki/Principio_KISS">Wikipedia</ulink> "(...)Este término es un acrónimo que corresponde a la frase en inglés «Mantenlo simple, estúpido» <emphasis>(Keep It Simple, Stupid)</emphasis>. Para evitar ser tosco, el acrónimo se hace corresponder con otras expresiones tales como <emphasis>«Manténgalo breve y simple» («Keep It Short and Simple»)</emphasis> u otras similares, pero que mantienen la misma idea del principio. (...) El principio KISS es aquel que recomienda el desarrollo empleando partes sencillas, comprensibles y con errores de fácil detección y corrección, rechazando lo enrevesado e innecesario en el desarrollo de sistemas complejos en ingeniería." </para></footnote>, todo escrito en shell y construido desde cero. Las librerías de funciones junto con los programas auxiliares están todos incluidos en el directorio /lib/dyne, donde el código está cuidadosamente documentado. </para>

<para>En este capítulo encontrarás documentación acerca de cómo crear y publicar nuevos módulos para luego empaquetarlos en un nuevo CD. Para más información y como referencia a la estructura interna de dyne:bolic toma en cuenta que esta distribución está escrita desde cero siguiendo el libro <ulink url="http://www.linuxfromscratch.org">Linux From Scratch</ulink>, el cual ofrece una extensa explicación de cómo todo fue agrupado. </para>

<indexterm><primary>Programación</primary></indexterm>

<para>Se incluyen los compiladores GNU C y C++ junto con varios lenguajes de script y herramientas relativas externas como Python, Perl, Tcl/Tk y Ruby. Además se incluyen 3 diferentes entornos de desarrollo para la programación visual básica: <emphasis>Glade</emphasis>, funcionando con GTK y C; <emphasis>Fluid</emphasis>, funcionando con Fltk y C++, y <emphasis>Gambas</emphasis>, disponible con el módulo externo devel. Además se incluye <emphasis>gtkdialog</emphasis> para que puedas rápidamente realizar diálogos gráficos e interacción con el usuario combinando varios componentes. </para>

<section>
<indexterm><primary>Personalizar</primary></indexterm>
<title>Personalizando tu live CD de Dyne</title>

<para>Es posible personalizar y expandir dyne:bolic en varias maneras: creando módulos de software para agregar aplicaciones y distribuirlas a la comunidad, además de que es posible cambiar el comportamiento del sistema durante el arranque. Para facilitar la personalización y el desarrollo, se incluye la herramienta <emphasis>dynesdk</emphasis> para automatizar el proceso de empaquetar los cambios en un nuevo live CD. 
</para>

<para>Para una buena introducción a los potenciales de esta herramienta puedes leer el artículo (en inglés) de <ulink url="http://www.linux.com/articles/54607">Stomfi</ulink> sobre lo que es posible hacer para personalizar dyne:bolic. 
</para>

<indexterm><primary>SDK</primary></indexterm>

<para>Para comenzar con tu propio desarrollo primero tienes que crear SDK en el DOCK de tu disco duro: </para>
<screen>
<prompt>[d:b] ~ # </prompt><userinput>dynesdk mksdk
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

<para>Recibirás dos preguntas a las que es mas seguro contestar <emphasis>no</emphasis> en ambos casos, a menos de que quieras modificar el core de dyne:II: </para>

<screen>
<prompt>* [?] do you want to uncompress the dyne.sys (y/N) ?</prompt>
<prompt>* [?] do you want to download the kernel sources (y/N) ?</prompt>
</screen>

<para>
en caso de que tardes en responder o no respondas, se tomará NO como respuesta por defecto después de 10 segundos y se continuará. 
</para>

<para>Este procedimiento creará un directorio SDK dentro de $DYNE_SYS_MNT/dyne, para luego habitarlo con los archivos de desarrollo que son descargados desde el repositorio en línea de subversion, si es que tienes conexión a la red.</para> 

<para>Con SDK puedes empaquetar las modificaciones a tu sistema en un nuevo ISO CD el cual se genera con los contenidos del directorio SDK/cdrom. Puedes luego agregar y remover módulos desde SDK/cdrom/dyne/modules así como agregar cualquier otra cosa dentro del sistema de archivos del CD, como por ejemplos archivos README personalizados, iconos, etc. </para>

</section>

<section>
<title>Crear nuevos módulos de software</title>

<para>Una vez que tengas un SDK y un poco de espacio disponible en tu disco duro puedes empezar a crear tus propios módulos de software para agregar aplicaciones a dyne:bolic. Si necesitas más información sobre las características y el uso de los modulos dyne, puedes revisar la sección "<emphasis>Módulos extra de software</emphasis>" de este manual. Ahora continuaremos con algunas instrucciones en cómo crearlos. </para>

<para>
Antes que nada asegurate que tienes un dock de tu sistema en un disco duro, luego crea un SDK (mira el capítulo anterior). Cuando tengas un directorio SDK en tu directorio puedes ver su localización con tan solo teclear: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>echo $DYNE_SYS_MNT/SDK
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

El próximo paso es crear el directorio para los módulos en el SDK y para eso elegiremos un nombre para nuestro módulo: vamos a crear el módulo tortilla con los comandos: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mkdir -p $DYNE_SYS_MNT/SDK/modules/tortilla
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
<prompt>[d:b] ~ # </prompt><userinput>mkdir $DYNE_SYS_MNT/SDK/modules/tortilla/bin
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
<prompt>[d:b] ~ # </prompt><userinput>mkdir $DYNE_SYS_MNT/SDK/modules/tortilla/lib
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
<prompt>[d:b] ~ # </prompt><userinput>touch $DYNE_SYS_MNT/SDK/modules/tortilla/VERSION
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>
</para>

<para>
básicamente estamos creando los directorios bin y lib además del archivo VERSION dentro del módulo, lo que puedes hacer con cualquier explorador de archivos o con midnight commander si quieres: vamos, sientete cómoda ;) 
</para>

<para>
El último paso es activar nuestro módulo tortilla montándolo en /opt/tortilla ya que todos los módulos son activados en el prefijo /opt. Para hacer esto usamos nuevamente el comando DyneSdk: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>dynesdk mount
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
<prompt>[d:b] ~ # </prompt><userinput>source /boot/dynenv.modules
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

¡Eso es todo! Nuestro nuevo módulo está montado en /opt y tenemos nuestras rutas configuradas correctamente. 
</para>

<para>Ten en cuenta que antes de comenzar el desarrollo de tu módulo, necesitas montar el dynesdk cada vez que reinicies. Puedes también abrir un módulo existente para trabajar en su desarrollo (por ejemplo tu excelente módulo tlayuda en el que tienes semanas trabajando); para esto utilizas el comando: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>dynesdk devel tlayuda
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>
</para>

<para>
Te regresará una pregunta, si es que quieres descomprimir el contenido del módulo para su desarrollo, indicándote el espacio que ocupará en tu disco duro. 

Paso seguido puedes compilar el software tortilla con 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>./configure --prefix=/opt/tortilla
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

o en algunos casos editar el PREFIX en el Makefile - ¡y no olvides ponerle salsa! :) 
</para>

<para>Para hacerlo más facil, cuando el software se construye con los usuales "./configure && make && make install" puedes usar el comando <emphasis>dynemodconf</emphasis> (seguido por el nombre del módulo) en vez de llamar directamente a ./configure. Esto ajustará el prefijo mas correctamente. Por ejemplo para compilar "mole-0.5" con el flag "--con-frijoles" dentro de tu módulo de tortilla: 

<screen>
<prompt>[d:b] ~/mole-0.5 # </prompt><userinput>dynemodconf tortilla --con-frijoles
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>
</para>

<para>
Una vez que has terminado de cocinar... digo, compilar, entonces puedes juntar todo en un módulo comprimido .dyne con 

<screen>
<prompt>[d:b] ~/mole-0.5 # </prompt><userinput>dynesdk squash tortilla
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

¡y ahi está! tu nuevo módulo se encontrará en $DYNE_SYS_MNT/dyne/SDK/cdrom/dyne/modules/tortilla.dyne listo para ser incluido en el próximo CD ISO que puedes empaquetar con <emphasis>dynesdk mkiso</emphasis>. </para>

<para>
Antes de liberar tu módulo a la comunidad, es una buena idea llenar alguna información acerca de tu creación para que la gente pueda contactarte y visitar las páginas del software. Para esto es el archivo VERSION que contiene un formato muy simple:
 
<screen>
name            Tortilla
desc            Frijoles negros en salsa de mole con tortillas
version         1.0
url             http://craizymaiz.tv/tortilla
packager        La Tlayudera Loca http://craizymaiz.tv/~tlayudera
</screen>

Usa tu editor de texto preferido para llenar estos campos, deja un espacio o una tabla entre cada nombre de campo y eso es todo.
</para>

<para>
Puedes agregar entradas o submenús para que el usuario pueda ejecutar tu software. Para hacer esto crea un archivo applist dentro del directorio etc de tu módulo, por ejemplo opt/tortilla/etc/applist. El archivo applist contendrá una lista de las aplicaciones binarias, las descripciones y los modos para comenzarlo mediante la utilización de flags. 

A continuación se muestra una descripción del formato, que es básicamente una lista separada por un | 

<screen>
# formato:
# nombre | descripcion | comado | flags | web url | autor

# flags:
# runonce | multi = si debería ejecutarse sólo una instancia, o no
# terminal        = si debería ejecutarse en una terminal
# manual          = si es una entrada de manual
# root | user     = si debe ejecutarse como root o como usario

# submenús pueden comenzar o finalizar con
# Begin | MiSubmenu
# End | MiSubmenu
</screen>
</para>

<para>
por ejemplo: 

<screen>
Begin | TORTILLA

Sope | maiz blanco agua y cal | masa --ovalo-chico | | http://craizymaiz.tv/ | La Tlayudera Loca
Tlayuda | maiz azul agua y cal | masa --circulo-gigante | | http://craizymaiz.tv/ | La Tlayudera Loca
Memela | maiz rojo agua y cal | masa --circulo-chico | | http://craizymaiz.tv/ | La Tlayudera Loca

End | TORTILLA
</screen>

Puedes también tener submenus utilizando Begin y End cada vez que lo necesites. Para ver un ejemplo completo mira la lista que se encuentra en <emphasis>$DYNE_SYS_MNT/applist</emphasis>.
</para>

<para>
En caso de que tu módulo necesite ajustar variables de entorno (como rutas opcionales y ajustes generales para aplicaciones) puedes simplemente declararlas en un archivo env dentro del directorio etc. Este archivo puede contener declaraciones variables de entorno, una por línea, las cuales serán exportadas en el sistema que se ejecuta, por ejemplo en nuestro módulo tortilla <emphasis>/opt/tortilla/etc/env</emphasis> mostrará algo similar a esto: 

<screen>
COCINA_PATH=/opt/tortilla/lib/cocina
SABOR_GLOBAL=picante
PERFIL_COCINERA=narigona
</screen>

</para>

<para>Puedes incluir tu configuración personal de usuario (home settings) dentro del módulo, para que estos sobrescriban los ajustes de usuario que dyne:II trae predeterminados. Esto es útil cuando quieres cambiar los ajustes predeterminados del manejador de ventanas (con una imágen para el escritorio por ejemplo) o mostrar aplicaciones preconfiguradas (con un archivo .config en tu home).
 </para>
 
<para>Para hacer esto simplemente tienes que crear un directorio <emphasis>skel</emphasis> dentro de tu módulo: todos los archivos que sean incluidos en el serán automáticamente copiados a todos los directorios home de todos los usuarios, ajustándolos para que sean adoptados por los usuarios que sean creados en el futuro. 
</para>

<para>En tus módulos puedes incluir cualquier módulo de kernel correctamente compilado para el kernel de dyne:II. 
</para>

<para>Para hacer eso tienes que crear un directorio <emphasis>kernel</emphasis> dentro de tu módulo: para que estos módulos sean usados en vez del modprobe standard, todos los módulos de kernel contenidos serán buscados y cargados si el comando <emphasis>loadmod</emphasis> los encuentra. 
</para>
<para>
En caso de que el módulo no sea solicitado de manera natural por la configuración de tu hardware (osea que no sea listado por el comando pcmimodules), construye tu propia detección o forza la carga de tu módulo dentro de un módulo con script de arranque. Puedes hacer un script dentro de tu módulo para que se ejecute cada vez que tu módulo es activado.</para>

<para>
 Para hacer esto tienes que crear un directorio <emphasis>etc</emphasis> dentro de tu módulo: <emphasis>todos los archivos ejecutables incluidos en el comodín rc.*</emphasis> serán lanzados al inicio, siendo el primer argumento $1 parte del nombre del módulo mismo. </para>

<para>

Esta es en resumen la estructura del archivo contenida en los módulos: 
<screen>
VERSION archivo requerido     contiene información acerca del módulo y sus fuentes

bin     directorio opcional,  contiene todos los binarios, automáticamente incluido en $PATH

lib     directorio opcional,  contiene todas las librerías, automáticamente incluido en $LD_LIBRARY_PATH

etc     directorio opcional,  contiene scripts de arranque rc.* ejecutados durante la activación

skel    directorio opcional,  contiene todas las configuraciones que serán agregadas a /home/usuario y /etc/skel

kernel  directorio opcional,  contiene módulos de kernel que pueden ser cargados por loadmod
</screen>
¡Tienes el poder de crear, ahora inventa algo maravilloso! :)
</para>

</section>

<section>

<title>Compilar un nuevo kernel</title>
<indexterm><primary>kernel</primary></indexterm>

<para>Asumiendo que ya aprendiste como compilar un kernel Linux desde las fuentes disponibles en <emphasis>kernel.org</emphasis>, compilar un nuevo kernel para dyne:bolic es relativamente fácil. 
</para>

<para>Tan solo hay que ir como de costumbre después de desempaquetar el código fuente: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>make menuconfig
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

</para>

<para>
Te regresará la configuración del kernel, la cual tu puedes adaptar como desees. En caso de que quieras tomar como configuración base para comenzar el kernel de dyne:bolic que se está ejecutando, desde el directorio kernel ejecuta: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>zcat /proc/config.gz > .config
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
<prompt>[d:b] ~ # </prompt><userinput>make oldconfig
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

</para>

<para>En caso de que compiles un kernel mas reciente, tendrás que responder nuevas preguntas incluidas en esa nueva versión. Después de configurar tu kernel puedes compilarlo usando make: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>make bzImage && make modules
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

</para>


<para>Cuando termines con la compilación de tu kernel, para empaquetar un kernel dyne:bolic se utiliza un comando que está dentro del directorio de fuentes linux: 

<screen>
<prompt>[d:b] ~ # </prompt><userinput>dynesdk mkkern
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>
</para>

<para>
La función <emphasis>mkkern</emphasis> de dynesdk empaquetará el kernel y sus módulos dentro de <emphasis>SDK/cdrom/dyne</emphasis>. Un archivo comprimido conteniendo todos los módulos (usualmente con un tamaño menor a 20MB) será nombrado con la versión de linux y tendrá la extensión <emphasis>.kmods</emphasis>. El kernel en sí será nombrado con la versión de linux (reducida a 8.3 caracteres para la compatibilidad con algunos cargadores de arranque) y tendrá la extensión .krn. 
</para>

<para>La razón para este acomodo es que, teniendo todos los kernels y sus módulos en dos archivos facilmente reconocibles por su extensión, se vuelve muy fácil compartir kernels en un dock: tan solo hay que poner el nuevo archivo dentro del directorio dyne/ y reconfigurar el cargador de arranque adecuadamente. Dado que los archivos .krn y .kmods están comprimidos, la distribución de nuevos kernels dyne:bolic se consigue tal cual, tan solo compartiendo los dos archivos. 
</para>

</section>


</chapter>

