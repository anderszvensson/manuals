<chapter>
<title>Command line console</title>

<indexterm><primary>CLI</primary></indexterm>
<indexterm><primary>GUI</primary></indexterm>

<para>
If  you really want  a fast  way to  work on  your computer  to change
configurations,  install   software,  or  work   remotely  on  another
computer, then  the command line is  the most efficient way  to do it.
Many people get scared of the command line interface (CLI) as they are
used to using  graphical user interfaces (GUI). If  you haven't used a
CLI before  it can be a  bit daunting but actually,  with practice you
may very well find it easier and come to prefer it over using a GUI.
</para>

<para>
The only key  really is to take it slowly, and  practice what you have
learnt. Don't try  and remember everything, just use  it what you know
and extend it as necessary. It will all come with time.
</para>

<section>
<title>Text commands</title>

<para>
The  command line  is the  most  powerful method  of interacting  with
Linux, however  if you  are not used  to it  the learning path  can be
steep.  The  best   strategy  is  just  to  start   using  some  basic
commands.  Don't attempt to  do all  your work  from the  command line
straight  away.  Learn  a few  commands,  use  them  and add  to  your
understanding  of what  they can  do over  time. Then  you  can slowly
extend  your vocabulary of  commands as  you need  to. Below  are some
basic commands that you could try starting with.
</para>

<para>

Don't try and learn all of them at once. Just choose a few and practice
them.

<simplelist>
<member>man</member>
<member>ls</member>
<member>cd</member>
<member>mkdir</member>
<member>mv</member>
<member>rm</member>
<member>locate / slocate</member>
<member>ping</member>
<member>cp</member>
<member>pwd</member>
<member>tab</member>
</simplelist>

And some others that would be good to know:

<simplelist>
<member>ldconfig</member>
<member>./configure</member>
<member>make</member>
<member>make install</member>
<member>tar</member>
<member>more</member>
<member>whereis</member>
</simplelist>

</para>

<para>
So,  lets have  a look  at each.  Feel free  to experiment  with these
commands. Be a  little careful as it is possible to  do some damage to
your  files, folder,s and  even the  operating system  if you  are too
casual. If there is a possibility one of the commands can accidentally
create havoc then I will make a note to warn you. So try some of these
out in a terminal.
</para>

<indexterm><primary>man</primary></indexterm>

<section>
<title>man</title>

<para>
This is a  good command to start with because  this accesses the buult
in  help  pages  for  Linux.  <emphasis>man</emphasis>  is  short  for
'manual' and  if you type this  command followed by a  space, and then
the name of another command you  will get a help page displayed in the
terminal with a description for that command. For example, typing:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>man ls
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

The  above will  give you  a terminal  window filled  with information
about  the <emphasis>ls</emphasis>  command. The  format of  this help
page might be a bit confusing, so just have a browse and don't get too
worried. The part you need to be interested in most is the description
of the  command (i.e., what it  does). To scroll down  the manual page
press   your   space  bar,   and   to   quit   the  man   page   press
the <emphasis>q</emphasis> key.
</para>

<para>
Try some  man commands and then  read about the other  commands I have
listed above.  There  is also another help system  that works the same
way,  but instead  of  typing man  you type  <emphasis>info</emphasis>
and the command like so:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>info ls
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Experiment!
</para>

</section>

<indexterm><primary>ls</primary></indexterm>

<section>
<title>ls</title>

<para>
The <emphasis>ls</emphasis> command is the 'list' command. You can use
this to list the contents of any directory you are in. Try typing this
command in a terminal window and see what you get. Now, one feature of
Linux commands is that you can add various parameters to them. This is
quite  a  simple  thing  to  do,  and refines  the  way  you  use  the
command. Usually these parameters are added to the command by typing a
'  - '  directly after  the command  and then  the parameter  names or
abbreviations. For example if I type the following:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>ls -l
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Then   I  am   /passing/  the   <emphasis>l</emphasis>   parameter  to
the <emphasis>ls</emphasis>  c||ommand. The  l parameter is  short for
'long list'  and refers to  a type of  format that the  ls information
should be displayed in.  This  format gives more information than just
typing the  ls command by  itself... Try the  two out and  compare the
difference.
</para>

<para>
You might  well ask 'how  do I know  what the parameters are  for each
command?'  This information can  be found  in the  man pages  for each
command and accessing these is easy (see above).
</para>

<para>
For the ls  command I suggest you get familiar  with the formats using
ls by itself, as well as ls -al, ls -l and ls -lh.
</para>

</section>

<indexterm><primary>cd</primary></indexterm>

<section>
<title>cd</title>

<para>
<emphasis>cd</emphasis> is  the most  common command used  to navigate
the  file-system on  your  computer.  cd  stands for  <emphasis>Change
Directory</emphasis>. Try it out by typing ls to get a list of all the
files  and folders in  the directory  you are  currently in.   Now try
typing ls followed  by the name of  one of the files in  the list, for
example if there was a file called 'me.txt' I could type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cd me.txt
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

This will give an error! Why?  Because you can't change to a directory
if it is a file. It's good to try this so that you understand that you
can't  do any  damage by  making a  mistake with  cd. To  change  to a
directory you type cd followed by  the name of a directory you want to
navigate to.   If there  was a directory  called 'src' listed  when we
tried the ls command, we would type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cd src
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

If that was successful then the  terminal won't throw up an error. Try
it with  a real  directory on your  computer. If  you fail it  will be
because either you don't have  permissions to enter the directory, you
misspelled the directory name, or the directory simply doesn't exist.
</para>

<para>
Now, a word about the  Linux file-system. Generally, if the system has
been set up nicely for you, you will be working in your <emphasis>home
directory</emphasis>.   This is  normally located  in a  set  place in
Linux. To find your home directory first type the following:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cd /
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

This will place you in the top directory on your computer's file-system.
</para>

<para>
If you  now type  ls this will  show the  list of directories  on your
computer at the top-most level of the file structure.
</para>

<para>
There   are  some  important   directories  here,   the  <emphasis>man
hier</emphasis> command  will give you an overview  and description of
their meaning;  but now  you need  to be most  concerned with  the one
named <emphasis>home</emphasis>.  To change  to this directory  we can
use the cd command we learned earlier:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cd home
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Now if you type  ls you will be shown a list  of more directories, and
hopefully one that is the same  as your username.  This is your /home/
directory.     Now,    we     have    been    navigating    to    this
using <emphasis>relative positioning</emphasis>, that is -- if I am in
the top directory  and I type 'cd  home' then I will be  placed in the
home directory  where all the  user's individual home  directories are
kept.
</para>

<para>
If I  was somewhere else on  the file system  and I typed 'cd  home' I
would get  an error.  If you  need to, you  can use <emphasis>absolute
paths</emphasis> to the  directory you wish to get  to.  As an example
if I  was in  some dark  corner of my  file-system and  I need  to get
quickly to the home directory I would type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cd /home
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

If I needed to get to  a directory under the home directory (let's say
I have a directory in there called 'adam'), I would type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cd /home/adam
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

</section>

<section>
<title>mkdir</title>

<para>
This is  the command you used to  create a directory and  is short for
<emphasis>Make Directory</emphasis>. To use this, simply type the name
of the directory you want to create after the mkdir command as so:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mkdir bleep
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

The above command  will create a directory in  the current directory I
am in called 'bleep'. If a directory with this name already existed, I
will  get an  error  and  the computer  won't  overwrite the  existing
directory. Try creating some directories.
</para>

</section>

<section>
<title>pwd</title>

<para>
If you  get lost and don't know  where you are in  the file-system you
can always type <emphasis>pwd</emphasis>  a||nd it will tell you where
you    are.    This    command   gives    you   the    location   path
or <emphasis>absolute  path</emphasis> to where you  are. For example,
if I  am in my  'adam' home directory,  the output of the  pwd command
will be:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>/home/adam
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Experiment with changing directories with *c||d* then typing *pwd* t||o
see where you are.
</para>

</section>

<section>
<title>mv</title>

<para>
This  command is  short for  <emphasis>Move</emphasis>.  It  is  as it
sounds  in   that  mv  allows  you   to  move  files   around  on  the
file-system. This command  is like the 'cut' and  'paste' actions from
Mac and  Windows rolled into one.  To  use mv you must  first type the
command, followed by  the file you want to move  (in absolute paths or
relative paths  including the filename)  and then the place  where you
want to move the file to (in absolute or relative paths). For example,
if I wanted  to move a file 'me.txt' from my  current directory to the
'/usr/bin' directory I would type the following:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mv me.txt /usr/bin
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

</para>

<para>
<emphasis>Note</emphasis>: I  don't have to  type the filename  in the
path name where I  want to move the file unless I  also wish to change
the name  of the file.  If for example  while I was moving  'me.txt' I
wanted to change the filename to "you.txt" I would type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mv me.txt /usr/bin/you.txt
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

If I just wanted to rename the file  and not move it I could use mv to
rename the file without moving it by typing this:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>mv me.txt you.txt
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

</para>

<para>
Note that  when you use  mv yo||u are  <emphasis>moving</emphasis> the
file not copying it, so the  original will be moved and won't exist in
the same place  you moved it from. Now, also be  a bit careful because
<emphasis>you  can  overwrite  files accidentally</emphasis>,  if  for
example I moved one file to a  directory with a file of the same name,
then the file I am moving  will overwrite that file. Then you could be
in trouble... so just be a wee bit careful.
</para>

</section>


<section>
<title>rm</title>

<para>
On  the other hand,  here is  a command  you should  be <emphasis>very
careful</emphasis>      about       using.       rm      is      short
for  <emphasis>Remove</emphasis>, and is  the command  you use  if you
wish to  delete a file  or directory (and  its contents). To  use this
command type 'rm' followed by the name of the file you wish to destroy
for good.  To remove a directory you can use the same command with the
parameter -R like so:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>rm -R directoryname
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Where /directoryname/ is of course  the name of the directory you wish
to remove. You can  also use <emphasis>rmdir</emphasis> for this which
(you guessed it) is short for remove directory. <emphasis>Be EXTREMELY
careful  when using  these  commands</emphasis>, if  used unwisely  it
could be the end of your operating system.
</para>

</section>

<section>
<title>locate</title>

<para>
These    commands   help    you   <emphasis>find    files    on   your
file-system</emphasis>. The  location of all files on  your system are
stored  in a  database  which  is updated  periodically  by using  the
updatedb command.   To find  a file simply  type 'locate'  followed by
part of  the name of the file  or directory you are  looking for.  For
example if I am looking for the file "icecast.conf" I would type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>locate icecast.conf
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

If I  don't get any  reply from typing  this it means that  either the
file doesn't exist  on my system or it exists  but my database doesn't
know where it is. In this later scenario I would type updatedb and try
again.
</para>

<para>
With locate  you can't destroy anything  so experiment as  much as you
like. Sometimes updatedb might take a  while to run if you haven't run
the command recently or if you have  a slow machine, it can also use a
lot of CPU power on slow machines  so never use it while you are doing
something else 'mission critical' on your machine.
</para>

<para>
You         might        also        like         to        experiment
with <emphasis>whereis</emphasis>, <emphasis>which</emphasis> and
<emphasis>find</emphasis> to look for files on your system.
</para>

</section>

<section>
<title>cp</title>

<para>
This is short for ...guesses?...<emphasis>copy</emphasis>. Use it like
'mv' , the  only difference is that it leaves  the original file where
it was while also creating a copy.
</para>

</section>

<section>
<title>ping</title>

<para>
Not usually included  in the top 10 commands you need  to know but its
handy if you need to know if you are online. <emphasis>ping</emphasis>
sends a request to any computer  on the net, if that computer gets the
request it will respond. Type 'ping'  followed by a URL that you know,
for example it might be a good idea to try the following:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>ping www.google.com
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

</para>

<para>
If that computer gets the request you will get some information coming
back through  the terminal... this will  keep scrolling so  to stop it
type <emphasis>ctrl + c</emphasis> and it will halt the ping process.
</para>

<para>
If   you  get   no  response   from   ping  then   you  are   probably
offline. However, some machines  online don't answer ping requests for
security and  other reasons... so make  sure you really  know that the
machine you are pinging does reply to ping requests.
</para>

<para>
Also,  some  internet  connections  won't allow  ping  traffic...  for
example,  while  I  am writing  this  I  am  in  an internet  cafe  in
Riga,...its  a fast  connection  but  I can't  ping,  this is  perhaps
because  they think  only  evil hackers  use  ping so  they have  some
paranoid network security disallowing all sorts of useful things....
</para>
</section>

<section>
<title>tab</title>

<para>
Tab is  not so  much a  command as a  keystroke... every  keyboard has
a <emphasis>tab key</emphasis>, and its a very useful thing to have in
GNU/Linux. You might  have used this keystroke before  to indent words
in  a  word  processor.  You  can  still  do  this in  GNU/Linux  word
processors, but when you use tab in the Linux terminal it becomes such
a time  saver that when  you master  it you will  be using it  all the
time.
</para>

<para>
Essentially        the       tab        keystroke        is       like
an <emphasis>auto-complete</emphasis>. If, for example, I want to move
the file 'dsjkdshdsdsjhds_ddsjw22.txt' somewhere with the 'mv' command
I can  either type out every letter  of the stupid filename,  or I can
type  'mv' (for  'move')  followed by  the  first few  letters of  the
filename  and  press  'tab'.   The   rest  of  the  filename  will  be
automagically filled  in. If  the filename is  not filled in  it means
that there  are several files  (or directories) that start  with those
first few  letters I  typed. To remedy  this I  could type a  few more
letters of the filename and press tab again, or to help me out I could
press *tab* twice and it will give  me a list of files that start with
those letters.
</para>

<para>
Tab is your friend, use it a lot.
</para>

</section>

<section>
<title>Other Commands</title>

<para>
At the  beginning of  this section  I said there  where a  few 'other'
commands that might also be good to know, they were:

<simplelist>
<member>ldconfig</member>
<member>./configure</member>
<member>make</member>
<member>make install</member>
<member>tar</member>
<member>more</member>
<member>whereis</member>
</simplelist>

I have already talked about some of them, namely *whereis* and
*updatedb*. The others might be useful if you are installing software.
</para>

<para>
More is  use if you want to  control the overly verbose  output of any
command to  the terminal. If  for example, I  am in a  directory which
contains 1000  files and I type  'ls' the output of  the command won't
fit nicely into my little terminal window so it will go scrolling past
faster than  is useful. To slow  it down so  I can read the  output we
follow the command with more like so:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>ls | more
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

If I used this  in my 1000 file directory I get one  page at a time of
output and pressing  the space-bar shows the next  page.  Pressing 'q'
quits more. Ok, so you might be wondering what the funny straight line
is   in    the   above   command...    well,   this   is    known   as
the <emphasis>pipe</emphasis> command.
</para>

<para>
Pipe allows  you to combine commands  together to control  the kind of
output you  get, usually its used  to refine a command  (which is what
the command parameters  also do). So, when you  get really fluent with
these commands you can write  things that look more like equations but
are really efficient ways of using standard commands... pipe will be
central to enhancing your efficiency.
</para>


</section>


</section> <!-- text commands -->

<section>
<title>Linux File Structure</title>

<para>
If you open your terminal and type the following (followed by pressing
the 'return' button):

<screen>
<prompt>[d:b] ~ # </prompt><userinput>cd /
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

You will be placed in the top directory of the Linux file system. If you
then type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>ls -al
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

You will see something similar to this:

<screen>
total 80
drwxr-xr-x  19 root root  4096 Oct  9 13:57 .
drwxr-xr-x  19 root root  4096 Oct  9 13:57 ..
drwxr-xr-x   2 root root  4096 Oct  5 09:31 bin
drwxr-xr-x   3 root root  4096 Oct  9 21:47 boot
drwxr-xr-x   1 root root     0 Jan  1  1970 dev
drwxr-xr-x  71 root root  4096 Oct 15 11:35 etc
drwxr-xr-x   4 root root  4096 Oct  9 19:21 home
drwxr-xr-x   8 root root  4096 Sep 18 23:29 lib
drwx------   2 root root 16384 Sep 18 20:06 lost+found
drwxr-xr-x   9 root root  4096 Oct  9 16:36 mnt
drwxr-xr-x   9 root root  4096 Oct  8 23:20 opt
dr-xr-xr-x  64 root root     0 Oct 15 11:35 proc
drwx------  75 root root  8192 Oct 15 12:35 root
drwxr-xr-x   2 root root  4096 Sep 23 18:58 sbin
drwxr-xr-x   9 root root     0 Oct 15 11:35 sys
drwxrwxrwt  60 root root  4096 Oct 15 12:36 tmp
drwxr-xr-x  17 root root  4096 Oct  5 09:31 usr
drwxr-xr-x  15 root root  4096 Oct  9 13:57 var
</screen>

<para>
The above listing is a  fairly standard directory structure for Linux.
Each name on the far  right represents a directory, and each directory
contains   files   and  directories   that   are   specific  to   that
directory. the  'lib' directory,  for example contains  code libraries
that the  software on your  system uses. For  now you only need  to be
concerned with  one directory:  the 'home' directory.   This directory
contains folders  that have  names corresponding to  each user  of the
machine. If you  log in as 'adam' for example then  you will be logged
into a  directory in the 'home'  directory with the same  name as your
username (i.e., 'adam' in this example).
</para>

<para>
The important thing  to be aware of right now  is this Linux directory
structure. The other important thing is that Linux is mostly comprised
of text files, so  you can change almost every part of  Linux - how it
looks  and works  -  by just  editing  the appropriate  text file.  In
Windows and Macintosh environments you  would usually do these kind of
changes  through  small applications  with  a  graphic user  interface
(GUI). In Windows,  for example, if you want  to change the resolution
of your  display you  use the 'display'  control panel located  in the
'control panels' directory. In Linux you can do this by editing a text
file.
</para>

<para>
This  has some  advantages  - one  is that  it  gives you  a lot  more
control.  But it also has some  disadvantages - it can be difficult to
learn which files  to edit and what to change.  Sometimes, to ease the
transition to Linux from other  operating systems, you will find there
are configuration  softwares for Linux  installed on your  system that
use  a  GUI  (Graphical  User  Interface)  similar  to  Macintosh  and
Windows. This  is not always the  case however, and  so eventually you
will find yourself doing this manually with a text editor.
</para>

</section> <!-- linux file structure -->


<section>
<title>Text Editors</title>

<para>
If you  don't know how to  use a text  editor in Linux then  you can't
really get too far. Reading 'README' files and 'INSTALL' files will be
a necessity quite early on when learning Linux on the command line.
</para>

<para>
Text editors is  a topic that many books have  been written about. So,
how do we cover  it here and do it justice... well  its tricky. We can
at  best get  a  superficial  glimpse. We  will  arbitrarily choose  a
couple:  <emphasis>nano</emphasis>  and <emphasis>vim</emphasis>.   We
will also look at <emphasis>less</emphasis> which is not an editor but
is a command that allows you to read files on your system.


<section>
<title>less</title>

<para>
Lets start  with 'less'. This is  a command that opens  text files for
reading only. If, for example, the directory you are currently working
in has a file called 'README', then try this command:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>less README
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

and you should see something like this in the terminal:


less.jpg

</para>

<para>
To scroll use the <emphasis>up and down arrows</emphasis>, and to quit
just type <emphasis>q</emphasis>
</para>

<para>
Remember that less  will only allow you to read  files.  To edit files
you will need  a text editor or word  processor (Sometimes there isn't
much difference between  the two).
</para>

</section>

<section>
<title>vim</title>

<para>
Vim is a text editor commonly used by programmers for working on code.
When you type *vim* in the terminal you will see something like this:

vim.jpg 

If you have *vi* installed you will see pretty much the same thing.
</para>

<para>
To open a file with *vim* it is  best if you type the name of the file
you wish  to open after  the vim command,  so that vim opens  with the
file already loaded. For example if  we wanted to read a "README" file
in the same directory we are currently working in then just type:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>vim README
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

This will open vim with the README file loaded as so:

vim_muse.jpg 

</para>

<para>
Now to scroll up and down the  file use the up and down arrows on your
keyboard.     To     quit     vim     press     <emphasis>:</emphasis>
then <emphasis>q</emphasis> then enter.
</para>

<para>
There is really a  lot to 'vi' or 'vim', and I  don't want to get into
it here, but you should really know  how to open a file (as above) and
then edit  a file. To edit  a file in vim  you need to  first open the
file, and then press <emphasis>i</emphasis>.
</para>

<para>
Now, I  am imagining vim is quite  a bit different to  any text editor
you have used before, so perhaps some explanation is needed. Vim opens
a file initially  as a read only file. This means  that when you first
open the file with vim you are not allowed to change the file. Vim has
then a  whole world of commands  you can use  to work on the  file and
most of the  commands are executed by just typing  a single letter, or
they are in the format:

<screen>
: command
</screen>

Where  'command' is  the name  of  the command  you wish  to use.  The
commands are  all designated  by shortcuts. An  'i' , for  example, is
short  for 'insert'.  The following  is a  table of  vim  commands you
should know:

<screen>
command                                 action
i  (only used in read-only mode)        insert text
:w (only used in read-only mode)        write changes to file
u  (only used in read-only mode)        undo changes
:q (only used in read-only mode)        quit vim
</screen>

</para>

<para>
In  addition, by pressing  the <emphasis>esc</emphasis>  (escape) key,
you will tell vim to return to the original mode (read only). You must
actually  press escape  before  you  execute any  of  the commands  in
vim. For example if I wanted  to open the file "README" and then alter
some    text,   I    would   do    the   following,    starting   with
typing <emphasis>vim README</emphasis> in the terminal. This will open
the "README"  file as  explained above.   Then if I  wish to  edit the
file, I  use my arrow keys  to navigate to  where I want to  insert or
delete some text.  I  then press <emphasis>i</emphasis>, this will put
me in  the insertion mode and now  anything I type will  appear in the
document itself.  When I have  finished making the changes I will then
press  the  <emphasis>esc</emphasis>  key,  and finally  to  save  the
changes I press <emphasis>:w</emphasis>. This will write the file with
the  new  changes.   I  then  need   to  quit  from  vim  so  I  press
the <emphasis>escape key followed by :q</emphasis>.
</para>

<para>
Now find a file and experiment. If you haven't used something like vim
before then  it might take  some getting used  to, so spend  some time
working out for  yourself how vim works before you  really need to use
it.
</para>
</section>

</section> <!-- text editors -->

<section>
<title>Install Software from Source</title>

<para>
Well, installing  software on  Linux is a  broad subject  because each
version of  Linux has its  own package management system.  However all
types of  Linux allow  the user to  install software using  the source
code.  However you  probably don't want to tackle  this process unless
you know  a little bit  about how to  use Linux commands and  a little
about the  Linux file system. If  you don't know about  these two then
its better to read up on them first and then return here.
</para>

<section>
<title>Uncompress</title>

<para>
Installing  from source  works  on any  Linux  system, so  its a  good
process to know, and it more  or less follows this route once you have
a source package:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>tar xvfz packagename.tar.gz
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Where 'packagename'  in the example above  is the actual  name of your
package that you wish to install. The <emphasis>tar</emphasis> command
followed  by the  parameters <emphasis>xvfz</emphasis>  uncompresses a
<emphasis>tar.gz</emphasis> file and creates a new directory with all
the extracted sources.  Now you must change your working directory to
this new directory using the 'cd' command.  Usually the new directory
name is the name of the compressed source package minus the '.tar.gz'
suffix.  For example, if my package really was called
'packagename.tar.gz' then after running the 'tar zxvf' command on it I
would be left with a new directory called 'packagename' and then I
would type 'cd packagename' to enter this new directory.  If you are
not sure of the name of the newly created package type 'ls'.
</para>

</section>

<section>
<title>Configure</title>

<para>
Alright... once inside the new directory, we want to start the actual
installation process. To do this 99% of the time you will need to type
the following:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>./configure
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

Ok, so this isn't really a command. Each installation package usually
has a script called <emphasis>configure</emphasis>. By putting a dot
and then a slash before the name of the script ( ./configure ) you are
telling Linux to execute (run) that script.  The configure script then
does its stuff, checking what kind of machine you have, what you
already have installed, what kind of Linux you are running etc etc
etc.
</para>

<para>
The most common problem that will occur at this stage is that the
configure script will halt and tell you that software library that the
new software depends on is missing. This can be a pain which is why
people invented package management systems. However if you do
experience this error then you need to use a search engine to find out
what software the error message is talking about and where to get it,
then start the installation process again with this new package. I am
not kidding when I say that this can sometimes mean an installation
can take days while you search and download all the packages you need.
</para>

</section>

<section>
<title>Compile</title>

<para>
So, lets assume you don't get any errors created by running the
configure script... in which case you are lucky and you should thank
whatever angel is looking over you...Now... the next command to type
in the install process is make like so:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>make
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

This command actually makes (compiles) the software for you. You will
then end up with a whole lot of compiled files which in total makes up
your software. The 'make' process can take a while depending on the
speed of your machine and the size of the package sources you are
installing. Running other applications will also slow down the
process.
</para>

<para>
When *make* has stopped, type the following:

<screen>
<prompt>[d:b] ~ # </prompt><userinput>make install
</userinput> <lineannotation><keycap>[Enter]</keycap></lineannotation>
</screen>

this will install the newly created software in the correct places in
your system. So now you just need to type the name of the application
in your terminal window and it should run. If it doesn't run and
throws an error, a common remedy is to type *ldconfig* and then try
again.  <emphasis>ldconfig</emphasis> updates the system so that your
operating system knows there are new library files etc.
</para>

</section>

</section> <!-- Install software from source -->

</chapter>
